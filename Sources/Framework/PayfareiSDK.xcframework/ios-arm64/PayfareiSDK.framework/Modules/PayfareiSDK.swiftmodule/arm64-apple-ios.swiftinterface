// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PayfareiSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public enum Environment : Swift.String {
  case sandbox
  case uat
  case production
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DataError : Swift.Error {
  case duplicateFailure
  case nonExistent
  case incomplete
  case unauthorized
  case accountLocked
  case noInternet
  case timeout
  case updateRequired
  case parseFailure((any Swift.Error)?)
  case serverFailure((any Swift.Error)?)
  case unknownReason((any Swift.Error)?)
  case limitReached(Swift.String?)
  case validEmailAddress
  case profileRecentlyUpdate
}
extension PayfareiSDK.DataError {
  public var localizedDescription: Swift.String {
    get
  }
}
public enum UserFlow {
  case activatePhysicalCard
  case viewVirtualCard
  case setCardPIN
  public static func == (a: PayfareiSDK.UserFlow, b: PayfareiSDK.UserFlow) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CallbackResult {
  case error(any Swift.Error)
  case moveBack
  case successActivationCardClosed
  case pinHasBeenChanged
  case virtualCardHasBeenViewed
  case maintenanceMode
  case setPinFeatureDisabled
  case activePhysicalCardFeatureDisabled
}
@_hasMissingDesignatedInitializers public class PayfareSDK {
  public static var instance: PayfareiSDK.PayfareSDK?
  public var debugEnabled: Swift.Bool {
    get
    set
  }
  public static func initialize(payfareID: Swift.String, tokenHandler: @escaping () -> Swift.String, environment: PayfareiSDK.Environment = .uat) -> PayfareiSDK.PayfareSDK
  public func openSDK(flow: PayfareiSDK.UserFlow, sourceViewControllerHandler: @escaping (UIKit.UIViewController?) -> Swift.Void, callBackHandler: @escaping (PayfareiSDK.CallbackResult) -> Swift.Void, errorHandler: @escaping (PayfareiSDK.CallbackResult) -> Swift.Void)
  @objc deinit
}
public protocol IsAlertViewController {
}
public enum CardError : Swift.Error, Swift.Equatable {
  case noCard
  case NO_CARD_TING
  case mismatchCard
  case inactiveCard
  case exceededLimit
  case CARD_ALREADY_ACTIVE
  case purseTransferFailure
  case accountLocked
  case nonExistent
  case unauthorized
  case noInternet
  case timeout
  case parseFailure((any Swift.Error)?)
  case unknownReason((any Swift.Error)?)
  case noCashDeposit
  case VC_OTP_NOT_VALIDATED
  case VC_I2C_TOKEN_EXPIRED
  case VC_OTP_ENTER_TIME_EXPIRE
  public static func == (lhs: PayfareiSDK.CardError, rhs: PayfareiSDK.CardError) -> Swift.Bool
}
extension PayfareiSDK.CardError {
  public var localizedDescription: Swift.String {
    get
  }
}
extension PayfareiSDK.Environment : Swift.Equatable {}
extension PayfareiSDK.Environment : Swift.Hashable {}
extension PayfareiSDK.Environment : Swift.RawRepresentable {}
extension PayfareiSDK.UserFlow : Swift.Equatable {}
extension PayfareiSDK.UserFlow : Swift.Hashable {}
